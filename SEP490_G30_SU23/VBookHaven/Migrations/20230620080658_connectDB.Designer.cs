// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VBookHaven.Models;

#nullable disable

namespace VBookHaven.Migrations
{
    [DbContext(typeof(VBookHavenDBContext))]
    [Migration("20230620080658_connectDB")]
    partial class connectDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Book_Author", (string)null);
                });

            modelBuilder.Entity("VBookHaven.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("VBookHaven.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AuthorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("VBookHaven.Models.Book", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("VBookHaven.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("VBookHaven.Models.Customer", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("AccountId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("VBookHaven.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ImageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("VBookHaven.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("VBookHaven.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("VBookHaven.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("RetailDiscount")
                        .HasColumnType("float");

                    b.Property<int?>("RetailPrice")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("WholesaleDiscount")
                        .HasColumnType("float");

                    b.Property<int?>("WholesalePrice")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("VBookHaven.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId", "ProductId")
                        .HasName("PK_PurchaseOrderDetail_1");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseOrderDetail");
                });

            modelBuilder.Entity("VBookHaven.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ReviewId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ProductId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("VBookHaven.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("VBookHaven.Models.ShippingInfo", b =>
                {
                    b.Property<int>("ShipInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipInfoId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ShipInfoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EditorId");

                    b.ToTable("ShippingInfo");
                });

            modelBuilder.Entity("VBookHaven.Models.Staff", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdCard")
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength();

                    b.Property<byte[]>("Image")
                        .HasColumnType("image");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("AccountId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("VBookHaven.Models.Stationery", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Origin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId")
                        .HasName("PK_Other_1");

                    b.ToTable("Stationery");
                });

            modelBuilder.Entity("VBookHaven.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("VBookHaven.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.HasOne("VBookHaven.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Author_Author");

                    b.HasOne("VBookHaven.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Author_Book");
                });

            modelBuilder.Entity("VBookHaven.Models.Account", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("InverseCreator")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Account_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("InverseEditor")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Account_Account_Edit");

                    b.HasOne("VBookHaven.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("VBookHaven.Models.Author", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("AuthorCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Author_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("AuthorEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Author_Account_Edit");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.Book", b =>
                {
                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithOne("Book")
                        .HasForeignKey("VBookHaven.Models.Book", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.Category", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("CategoryCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Category_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("CategoryEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Category_Account_Edit");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.Customer", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("VBookHaven.Models.Customer", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VBookHaven.Models.Image", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("ImageCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Image_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("ImageEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Image_Account_Edit");

                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Image_Product");

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.Order", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("OrderCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Order_Account_Create");

                    b.HasOne("VBookHaven.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("OrderEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Order_Account_Edit");

                    b.HasOne("VBookHaven.Models.ShippingInfo", "ShippingInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_Order_ShippingInfo");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Editor");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("VBookHaven.Models.OrderDetail", b =>
                {
                    b.HasOne("VBookHaven.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.Product", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("ProductCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Product_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("ProductEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Product_Account_Edit");

                    b.HasOne("VBookHaven.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_Product_SubCategory");

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("VBookHaven.Models.PurchaseOrder", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("PurchaseOrderCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_PurchaseOrder_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("PurchaseOrderEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_PurchaseOrder_Account_Edit");

                    b.HasOne("VBookHaven.Models.Staff", "Staff")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_PurchaseOrder_Staff");

                    b.HasOne("VBookHaven.Models.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_PurchaseOrder_Supplier");

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("Staff");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("VBookHaven.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderDetail_Product");

                    b.HasOne("VBookHaven.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseOrderDetail_PurchaseOrder");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("VBookHaven.Models.Review", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Account")
                        .WithMany("ReviewAccounts")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Review_Account");

                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("ReviewCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Review_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("ReviewEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Review_Account_Edit");

                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Review_Product");

                    b.Navigation("Account");

                    b.Navigation("Creator");

                    b.Navigation("Editor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.Role", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("RoleCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Role_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("RoleEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Role_Account_Edit");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.ShippingInfo", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("ShippingInfoCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_ShippingInfo_Account_Create");

                    b.HasOne("VBookHaven.Models.Customer", "Customer")
                        .WithMany("ShippingInfos")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ShippingInfo_Customer");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("ShippingInfoEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_ShippingInfo_Account_Edit");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.Staff", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("VBookHaven.Models.Staff", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VBookHaven.Models.Stationery", b =>
                {
                    b.HasOne("VBookHaven.Models.Product", "Product")
                        .WithOne("Stationery")
                        .HasForeignKey("VBookHaven.Models.Stationery", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Stationery_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VBookHaven.Models.SubCategory", b =>
                {
                    b.HasOne("VBookHaven.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_SubCategory_Category");

                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("SubCategoryCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_SubCategory_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("SubCategoryEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_SubCategory_Account_Edit");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.Supplier", b =>
                {
                    b.HasOne("VBookHaven.Models.Account", "Creator")
                        .WithMany("SupplierCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Supplier_Account_Create");

                    b.HasOne("VBookHaven.Models.Account", "Editor")
                        .WithMany("SupplierEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_Supplier_Account_Edit");

                    b.Navigation("Creator");

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("VBookHaven.Models.Account", b =>
                {
                    b.Navigation("AuthorCreators");

                    b.Navigation("AuthorEditors");

                    b.Navigation("CategoryCreators");

                    b.Navigation("CategoryEditors");

                    b.Navigation("Customer");

                    b.Navigation("ImageCreators");

                    b.Navigation("ImageEditors");

                    b.Navigation("InverseCreator");

                    b.Navigation("InverseEditor");

                    b.Navigation("OrderCreators");

                    b.Navigation("OrderEditors");

                    b.Navigation("ProductCreators");

                    b.Navigation("ProductEditors");

                    b.Navigation("PurchaseOrderCreators");

                    b.Navigation("PurchaseOrderEditors");

                    b.Navigation("ReviewAccounts");

                    b.Navigation("ReviewCreators");

                    b.Navigation("ReviewEditors");

                    b.Navigation("RoleCreators");

                    b.Navigation("RoleEditors");

                    b.Navigation("ShippingInfoCreators");

                    b.Navigation("ShippingInfoEditors");

                    b.Navigation("Staff");

                    b.Navigation("SubCategoryCreators");

                    b.Navigation("SubCategoryEditors");

                    b.Navigation("SupplierCreators");

                    b.Navigation("SupplierEditors");
                });

            modelBuilder.Entity("VBookHaven.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("VBookHaven.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShippingInfos");
                });

            modelBuilder.Entity("VBookHaven.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("VBookHaven.Models.Product", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("Reviews");

                    b.Navigation("Stationery");
                });

            modelBuilder.Entity("VBookHaven.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("VBookHaven.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("VBookHaven.Models.ShippingInfo", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VBookHaven.Models.Staff", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("VBookHaven.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VBookHaven.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
